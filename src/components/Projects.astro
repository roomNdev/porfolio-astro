---
import NextJS from "./icons/NextJS.astro"
import Tailwind from "./icons/Tailwind.astro"
import Cloudinary from "./icons/Cloudinary.astro"
import Prisma from "./icons/Prisma.astro"
import React from "./icons/React.astro"
import Css from "./icons/CSS.astro"
import JS from "./icons/JS.astro"
import MP from "./icons/MP.astro"
import Clerk from "./icons/Clerk.astro"
import projects from "../Projects.json"

const ICONS = { NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "TailwindCSS",
    class: "bg-black text-white",
    icon: Tailwind,
  },
  CLOUDINARY: {
    name: "Cloudinary",
    class: "bg-black text-white",
    icon: Cloudinary,
  },
  PRISMA: {
    name: "Prisma (SQL)",
    class: "bg-black text-white",
    icon: Prisma,
  },
  REACT: {
    name: "React",
    class: "bg-black text-white",
    icon: React,
  }, 
  CSS: {
    name: "CSS",
    class: "bg-black text-white",
    icon: Css,
  },
  JS: {
    name: "Vanilla JS",
    class: "bg-black text-white",
    icon: JS,
  },
  Zustand: {
    name: "Zustand",
    class: "bg-black text-white",
    icon: undefined,
  },
  WS: {
    name: "Web Sockets",
    class: "bg-black text-white",
    icon: undefined,
  },
  MP: {
    name: "MP Checkout",
    class: "bg-black text-white",
    icon: MP,
  },
  CLERK: {
    name: "Clerk",
    class: "bg-black text-white",
    icon: Clerk,
  },

  //Fullstack, backend, frontend
}

const PROJECTS = [
    {
    title: "E-commerce NextJS",
    img: "https://i.imgur.com/ubPwmbR.jpg",
    text: "An E-commerce made with NextJS(React) and TailwindCSS, where the API of MercadoPago was integrated to make online payments.",
    id: 1,
    url: "https://next-ecommerce-mu-amber.vercel.app",
    tags: [
        ICONS.NEXT, ICONS.TAILWIND, ICONS.Zustand, ICONS.MP
    ]
  },
  {
    title: "CMS y Dashboard",
    img: "https://i.imgur.com/XWwYhxQ.jpg",
    text: "This project is related to the previous as it is a plataform for managing content, as well as a control panel for administrate the stock, the sales and configurations of the store",
    id: 2,
    url: "https://next-ecommerce-dashboard-romndev.vercel.app",
    tags: [
        ICONS.NEXT, ICONS.CLOUDINARY, ICONS.PRISMA, ICONS.CLERK
    ]
  },
  {
    title: "E-commerce + Dashboard",
    img: "https://i.imgur.com/BuYP5Au.jpg",
    text: "In this project I made an E-commerce completely native, using React, and developed the backend with NodeJS, also it has a control panel of the orders done with HTML, CSS and Javascript",
    id: 3,
    url: "https://react-webshop-front.vercel.app",
    tags: [
        ICONS.REACT, ICONS.CSS, ICONS.JS, ICONS.WS
    ]
  },
]


---

<section id="projects" class="pt-12 m-auto max-w-[900px] ">
<h2 class="text-center text-3xl text-yellow-300">Projects</h2>
  <section class="flex gap-4 flex-wrap items-center justify-center " id="projects-container">
        {
          PROJECTS.map((project) => {
                 
              return (
                <article 
                class="
                project
                flex flex-col items-center gap-2 
                text-lg text-wrap p-2 
                w-full 
                border-b border-slate-600/40 hover:border-slate-500/80 transition-color-1
                ">
                <h3 class="text-sm sm:text-xl text-center h-16 flex items-center">{project.title}</h3>
                <section class="flex sm:flex-row flex-col elements mx-1">
                  <a  target="_blank"
                  href={project.url}
                  class="bg-slate-700/70 relative
                  p-1 rounded-xl opacity-90 
                  cursor-pointer
                  ">
                    <div class="overflow-hidden rounded-lg ">
                      <img src={project.img} alt="" class="sm:max-w-[400px]  hover:scale-105 transition-opacity transition-transform duration-500"/>
                    </div>
                    <p 
                    class="text-sm 
                    w-[40%] text-center
                    absolute bottom-[3%] left-[30%] 
                    bg-slate-600/50 p-1 rounded-xl transition-color-1
                    hover:bg-slate-800 transition-colors hover:scale-x-105 transition-transform duration-500
                    ">Go to the website
                    </p>
                  </a>
                    <section class="flex flex-col justify-center pl-4">
                      <p 
                      class="h-0 sm:h-auto 
                      text-sm text-pretty 
                      sm:visible invisible sm:text-base"
                    >
                      {project.text}
                      </p>
                    <section class="flex ">
                      <ul class="flex flex-wrap flex-row gap-2 my-4">
                        {project.tags.map((tag) => 
                          <li class="">
                            <span
                            class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                            >
                            {tag.icon && <tag.icon class="size-4" />}
                            <p class="px-1 text-xs text-center">{tag.name}</p>
                            </span>
                            </li>
                            )}
                            </ul>
                            </section>
                          </section>
                        </section>
                    <details class="w-full bg-slate-600/40 rounded-lg sm:invisible sm:h-0">
                      <summary class="text-xs text-center w-full cursor-pointer py-1 flex justify-center sm:invisible ">
                        Description
                      </summary>  
                      <div class="content p-2">
                        <p 
                      class="text-sm text-pretty sm:text-base">
                      {project.text}
                      </p>
                      </div>
                    </details>
                </article>
            )
        })
        }
  </section>
</section>
<script is:inline>
class Accordion {
  constructor(el) {
    // Store the <details> element
    this.el = el;
    // Store the <summary> element
    this.summary = el.querySelector('summary');
    // Store the <div class="content"> element
    this.content = el.querySelector('.content');

    // Store the animation object (so we can cancel it if needed)
    this.animation = null;
    // Store if the element is closing
    this.isClosing = false;
    // Store if the element is expanding
    this.isExpanding = false;
    // Detect user clicks on the summary element
    this.summary.addEventListener('click', (e) => this.onClick(e));
  }

  onClick(e) {
    // Stop default behaviour from the browser
    e.preventDefault();
    // Add an overflow on the <details> to avoid content overflowing
    this.el.style.overflow = 'hidden';
    // Check if the element is being closed or is already closed
    if (this.isClosing || !this.el.open) {
      this.open();
    // Check if the element is being openned or is already open
    } else if (this.isExpanding || this.el.open) {
      this.shrink();
    }
  }

  shrink() {
    // Set the element as "being closed"
    this.isClosing = true;
    
    // Store the current height of the element
    const startHeight = `${this.el.offsetHeight}px`;
    // Calculate the height of the summary
    const endHeight = `${this.summary.offsetHeight}px`;
    
    // If there is already an animation running
    if (this.animation) {
      // Cancel the current animation
      this.animation.cancel();
    }
    
    // Start a WAAPI animation
    this.animation = this.el.animate({
      // Set the keyframes from the startHeight to endHeight
      height: [startHeight, endHeight]
    }, {
      duration: 400,
      easing: 'ease-out'
    });
    
    // When the animation is complete, call onAnimationFinish()
    this.animation.onfinish = () => this.onAnimationFinish(false);
    // If the animation is cancelled, isClosing variable is set to false
    this.animation.oncancel = () => this.isClosing = false;
  }

  open() {
    // Apply a fixed height on the element
    this.el.style.height = `${this.el.offsetHeight}px`;
    // Force the [open] attribute on the details element
    this.el.open = true;
    // Wait for the next frame to call the expand function
    window.requestAnimationFrame(() => this.expand());
  }

  expand() {
    // Set the element as "being expanding"
    this.isExpanding = true;
    // Get the current fixed height of the element
    const startHeight = `${this.el.offsetHeight}px`;
    // Calculate the open height of the element (summary height + content height)
    const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;
    
    // If there is already an animation running
    if (this.animation) {
      // Cancel the current animation
      this.animation.cancel();
    }
    
    // Start a WAAPI animation
    this.animation = this.el.animate({
      // Set the keyframes from the startHeight to endHeight
      height: [startHeight, endHeight]
    }, {
      duration: 400,
      easing: 'ease-out'
    });
    // When the animation is complete, call onAnimationFinish()
    this.animation.onfinish = () => this.onAnimationFinish(true);
    // If the animation is cancelled, isExpanding variable is set to false
    this.animation.oncancel = () => this.isExpanding = false;
  }

  onAnimationFinish(open) {
    // Set the open attribute based on the parameter
    this.el.open = open;
    // Clear the stored animation
    this.animation = null;
    // Reset isClosing & isExpanding
    this.isClosing = false;
    this.isExpanding = false;
    // Remove the overflow hidden and the fixed height
    this.el.style.height = this.el.style.overflow = '';
  }
}

document.querySelectorAll('details').forEach((el) => {
  new Accordion(el);
});
</script>
